from astropy.io import fits
import matplotlib.pyplot as plt
import glob
import numpy as np
from datetime import datetime

# File list
flist = glob.glob('throughput/*fits_sens')

# Dictionary to store data by year
data_by_year = {}

for filename in flist:
    # Open the FITS file
    h = fits.open(filename)
    wave = h[2].data
    throughput = h[4].data
    date_obs = h[0].header['DATE-OBS']
    h.close()

    # Parse observation date
    obs_date = datetime.strptime(date_obs, '%Y-%m-%d')
    year = obs_date.year

    # Filter throughput values by wavelength range
    avg_3500_4500 = np.mean(throughput[(wave > 3500) & (wave < 4500)])
    avg_4500_5500 = np.mean(throughput[(wave > 4500) & (wave < 5500)])

    # Store the data
    if year not in data_by_year:
        data_by_year[year] = []
    data_by_year[year].append((obs_date, avg_3500_4500, avg_4500_5500))

# Prepare data for plotting
mean_dates = []
mean_values_3500_4500 = []
mean_values_4500_5500 = []
std_mean_values_3500_4500 = []
std_mean_values_4500_5500 = []


for year, entries in sorted(data_by_year.items()):
    # Sort by average values and select top 3 for each wavelength range
    sorted_3500_4500 = sorted(entries, key=lambda x: x[1], reverse=True)[:3]
    sorted_4500_5500 = sorted(entries, key=lambda x: x[2], reverse=True)[:3]

    # Calculate mean values and dates
    mean_3500_4500 = np.nanmean([x[1] for x in sorted_3500_4500])
    mean_4500_5500 = np.nanmean([x[2] for x in sorted_4500_5500])
    std_mean_3500_4500 = np.nanstd([x[1] for x in sorted_3500_4500])
    std_mean_4500_5500 = np.nanstd([x[2] for x in sorted_4500_5500])
    mean_date = np.nanmean([x[0].timestamp() for x in sorted_3500_4500 + sorted_4500_5500])
   mean_date = datetime.fromtimestamp(mean_date)
   # std_mean_date = np.nanstd([x[0].timestamp() for x in sorted_3500_4500 + sorted_4500_5500])
   # std_mean_date = datetime.fromtimestamp(mean_date)


    mean_dates.append(mean_date)
    mean_values_3500_4500.append(mean_3500_4500)
    mean_values_4500_5500.append(mean_4500_5500)
    std_mean_values_3500_4500.append(std_mean_3500_4500)
    std_mean_values_4500_5500.append(std_mean_4500_5500)
# Prepare data for plotting
total_dates = []
total_values_3500_4500 = []
total_values_4500_5500 = []
std_total_values_3500_4500 = []
std_total_values_4500_5500 = []

for year, entries in sorted(data_by_year.items()):
    # Sort by average values and select top 3 for each wavelength range
    total_sorted_3500_4500 = sorted(entries, key=lambda x: x[1], reverse=True)
    total_sorted_4500_5500 = sorted(entries, key=lambda x: x[2], reverse=True)

    total_3500_4500 = np.nanmean([x[1] for x in total_sorted_3500_4500])
    total_4500_5500 = np.nanmean([x[2] for x in total_sorted_4500_5500])
    std_total_3500_4500 = np.nanstd([x[1] for x in total_sorted_3500_4500])
    std_total_4500_5500 = np.nanstd([x[2] for x in total_sorted_4500_5500])
    total_date = np.nanmean([x[0].timestamp() for x in total_sorted_3500_4500 + total_sorted_4500_5500])
    total_date = datetime.fromtimestamp(total_date)

    total_dates.append(total_date)
    total_values_3500_4500.append(total_3500_4500)
    total_values_4500_5500.append(total_4500_5500)
    std_total_values_3500_4500.append(std_total_3500_4500)
    std_total_values_4500_5500.append(std_total_4500_5500)


# Plot the results
plt.figure(figsize=(12, 8))

plt.errorbar(mean_dates, mean_values_3500_4500, yerr=std_mean_values_3500_4500, fmt='o-', label='3500-4500 Å', color='blue', ecolor='k')
plt.errorbar(mean_dates, mean_values_4500_5500, yerr=std_mean_values_4500_5500, fmt='o-', label='4500-5500 Å', color='green', ecolor='k')
plt.errorbar(total_dates, total_values_3500_4500, yerr=std_mean_values_3500_4500, fmt='o-', label='3500-4500 Å', color='aqua', ecolor='k')
plt.errorbar(total_dates, total_values_4500_5500, yerr=std_mean_values_4500_5500, fmt='o-', label='4500-5500 Å', color='lightgreen', ecolor='k')

plt.xlabel('Year')
plt.ylabel('Mean Throughput')
plt.title('Mean Throughput Over Time')
plt.legend()
plt.grid(True)
plt.gcf().autofmt_xdate()
plt.show()
